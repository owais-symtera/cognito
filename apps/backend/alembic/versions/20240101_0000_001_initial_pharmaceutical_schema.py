"""Initial pharmaceutical intelligence platform schema

Pharmaceutical Intelligence Platform Database Migration
Generated by Alembic for CognitoAI Engine regulatory compliance

Revision ID: 001
Revises:
Create Date: 2024-01-01 00:00:00.000000
Migration Type: Initial pharmaceutical intelligence platform schema
Pharmaceutical Compliance: Required

"""
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic for pharmaceutical migration tracking
revision: str = '001'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """
    Upgrade pharmaceutical database schema.

    Creates complete pharmaceutical intelligence platform schema including:
    - User management and access control
    - Drug request tracking with audit trails
    - Category result processing with source attribution
    - Source reference tracking and verification
    - Conflict detection and resolution
    - Process tracking and correlation
    - Immutable audit trail system
    - API usage logging and cost tracking

    IMPORTANT: All changes maintain pharmaceutical audit trail
    integrity and comply with 7-year data retention requirements.
    """

    # Create pharmaceutical enum types
    request_status_enum = postgresql.ENUM(
        'pending', 'processing', 'completed', 'failed',
        name='requeststatus',
        create_type=False
    )
    request_status_enum.create(op.get_bind(), checkfirst=True)

    category_status_enum = postgresql.ENUM(
        'pending', 'processing', 'completed', 'failed', 'skipped',
        name='categorystatus',
        create_type=False
    )
    category_status_enum.create(op.get_bind(), checkfirst=True)

    api_provider_enum = postgresql.ENUM(
        'chatgpt', 'perplexity', 'grok', 'gemini', 'tavily',
        name='apiprovider',
        create_type=False
    )
    api_provider_enum.create(op.get_bind(), checkfirst=True)

    source_type_enum = postgresql.ENUM(
        'research_paper', 'clinical_trial', 'news', 'regulatory', 'patent',
        'fda_document', 'ema_document', 'other',
        name='sourcetype',
        create_type=False
    )
    source_type_enum.create(op.get_bind(), checkfirst=True)

    verification_status_enum = postgresql.ENUM(
        'pending', 'verified', 'disputed', 'invalid', 'expired',
        name='verificationstatus',
        create_type=False
    )
    verification_status_enum.create(op.get_bind(), checkfirst=True)

    audit_event_type_enum = postgresql.ENUM(
        'create', 'update', 'delete', 'process_start', 'process_complete',
        'process_error', 'source_verification', 'conflict_resolution',
        'data_export', 'user_access',
        name='auditeventtype',
        create_type=False
    )
    audit_event_type_enum.create(op.get_bind(), checkfirst=True)

    user_role_enum = postgresql.ENUM(
        'admin', 'researcher', 'analyst', 'viewer', 'api_user',
        name='userrole',
        create_type=False
    )
    user_role_enum.create(op.get_bind(), checkfirst=True)

    # Create users table for pharmaceutical platform access control
    op.create_table(
        'users',
        sa.Column('id', postgresql.UUID(as_uuid=False), primary_key=True),
        sa.Column('username', sa.String(50), unique=True, nullable=False, index=True),
        sa.Column('email', sa.String(255), unique=True, nullable=False, index=True),
        sa.Column('full_name', sa.String(255), nullable=False),
        sa.Column('hashed_password', sa.String(255), nullable=False),
        sa.Column('role', user_role_enum, nullable=False, default='viewer'),
        sa.Column('is_active', sa.Boolean, nullable=False, default=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.func.now()),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()),
        sa.Column('last_login_at', sa.DateTime(timezone=True)),
        sa.Column('failed_login_attempts', sa.Integer, nullable=False, default=0),
        sa.CheckConstraint('failed_login_attempts >= 0', name='ck_users_failed_attempts_positive'),
    )
    op.create_index('ix_users_role_active', 'users', ['role', 'is_active'])

    # Create pharmaceutical categories table for dynamic configuration
    op.create_table(
        'pharmaceutical_categories',
        sa.Column('id', sa.Integer, primary_key=True, autoincrement=True),
        sa.Column('name', sa.String(100), unique=True, nullable=False, index=True),
        sa.Column('description', sa.Text, nullable=False),
        sa.Column('display_order', sa.Integer, nullable=False, default=0),
        sa.Column('is_active', sa.Boolean, nullable=False, default=True),
        sa.Column('search_parameters', postgresql.JSONB, nullable=False, default={}),
        sa.Column('processing_rules', postgresql.JSONB, nullable=False, default={}),
        sa.Column('prompt_templates', postgresql.JSONB, nullable=False, default={}),
        sa.Column('verification_criteria', postgresql.JSONB, nullable=False, default={}),
        sa.Column('conflict_resolution_strategy', sa.String(50), nullable=False, default='confidence_weighted'),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.func.now()),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()),
        sa.CheckConstraint('display_order >= 0', name='ck_pharmaceutical_categories_order_positive'),
    )
    op.create_index('ix_pharmaceutical_categories_active_order', 'pharmaceutical_categories', ['is_active', 'display_order'])

    # Create drug requests table - core pharmaceutical intelligence requests
    op.create_table(
        'drug_requests',
        sa.Column('id', postgresql.UUID(as_uuid=False), primary_key=True),
        sa.Column('drug_name', sa.String(255), nullable=False, index=True),
        sa.Column('status', request_status_enum, nullable=False, default='pending', index=True),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.func.now(), index=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()),
        sa.Column('completed_at', sa.DateTime(timezone=True)),
        sa.Column('user_id', postgresql.UUID(as_uuid=False), sa.ForeignKey('users.id'), index=True),
        sa.Column('total_categories', sa.Integer, nullable=False, default=17),
        sa.Column('completed_categories', sa.Integer, nullable=False, default=0),
        sa.Column('failed_categories', postgresql.ARRAY(sa.String), nullable=False, default=[]),
        sa.Column('priority_categories', postgresql.ARRAY(sa.Integer)),
        sa.Column('estimated_completion', sa.DateTime(timezone=True)),
        sa.Column('actual_processing_time', sa.Integer),
        sa.Column('request_metadata', postgresql.JSONB),
        sa.CheckConstraint('total_categories >= 0', name='ck_drug_requests_total_positive'),
        sa.CheckConstraint('completed_categories >= 0', name='ck_drug_requests_completed_positive'),
        sa.CheckConstraint('completed_categories <= total_categories', name='ck_drug_requests_completed_lte_total'),
        sa.CheckConstraint('completed_at IS NULL OR completed_at >= created_at', name='ck_drug_requests_completion_after_creation'),
        sa.CheckConstraint('actual_processing_time IS NULL OR actual_processing_time >= 0', name='ck_drug_requests_processing_time_positive'),
    )
    op.create_index('ix_drug_requests_status_created', 'drug_requests', ['status', 'created_at'])
    op.create_index('ix_drug_requests_user_status', 'drug_requests', ['user_id', 'status'])

    # Create process tracking table for comprehensive process correlation
    op.create_table(
        'process_tracking',
        sa.Column('id', postgresql.UUID(as_uuid=False), primary_key=True),
        sa.Column('request_id', postgresql.UUID(as_uuid=False), sa.ForeignKey('drug_requests.id', ondelete='CASCADE'), nullable=False, index=True),
        sa.Column('process_type', sa.String(100), nullable=False, index=True),
        sa.Column('status', sa.String(50), nullable=False, index=True),
        sa.Column('started_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.func.now()),
        sa.Column('completed_at', sa.DateTime(timezone=True)),
        sa.Column('error_message', sa.Text),
        sa.Column('correlation_id', sa.String(255), index=True),
        sa.Column('parent_process_id', postgresql.UUID(as_uuid=False), sa.ForeignKey('process_tracking.id'), index=True),
        sa.Column('process_metadata', postgresql.JSONB),
        sa.CheckConstraint('completed_at IS NULL OR completed_at >= started_at', name='ck_process_tracking_completion_after_start'),
    )
    op.create_index('ix_process_tracking_request_type', 'process_tracking', ['request_id', 'process_type'])
    op.create_index('ix_process_tracking_status_started', 'process_tracking', ['status', 'started_at'])

    # Create category results table - individual pharmaceutical category processing
    op.create_table(
        'category_results',
        sa.Column('id', postgresql.UUID(as_uuid=False), primary_key=True),
        sa.Column('request_id', postgresql.UUID(as_uuid=False), sa.ForeignKey('drug_requests.id', ondelete='CASCADE'), nullable=False, index=True),
        sa.Column('category_id', sa.Integer, sa.ForeignKey('pharmaceutical_categories.id'), nullable=False, index=True),
        sa.Column('category_name', sa.String(100), nullable=False, index=True),
        sa.Column('summary', sa.Text, nullable=False),
        sa.Column('confidence_score', sa.Float, nullable=False, default=0.0),
        sa.Column('data_quality_score', sa.Float, nullable=False, default=0.0),
        sa.Column('status', category_status_enum, nullable=False, default='pending', index=True),
        sa.Column('processing_time_ms', sa.Integer, nullable=False, default=0),
        sa.Column('retry_count', sa.Integer, nullable=False, default=0),
        sa.Column('error_message', sa.Text),
        sa.Column('started_at', sa.DateTime(timezone=True)),
        sa.Column('completed_at', sa.DateTime(timezone=True)),
        sa.Column('api_calls_made', sa.Integer, nullable=False, default=0),
        sa.Column('token_count', sa.Integer, nullable=False, default=0),
        sa.Column('cost_estimate', sa.Float, nullable=False, default=0.0),
        sa.CheckConstraint('confidence_score >= 0.0 AND confidence_score <= 1.0', name='ck_category_results_confidence_range'),
        sa.CheckConstraint('data_quality_score >= 0.0 AND data_quality_score <= 1.0', name='ck_category_results_quality_range'),
        sa.CheckConstraint('processing_time_ms >= 0', name='ck_category_results_time_positive'),
        sa.CheckConstraint('retry_count >= 0', name='ck_category_results_retry_positive'),
        sa.CheckConstraint('api_calls_made >= 0', name='ck_category_results_api_calls_positive'),
        sa.CheckConstraint('token_count >= 0', name='ck_category_results_tokens_positive'),
        sa.CheckConstraint('cost_estimate >= 0.0', name='ck_category_results_cost_positive'),
        sa.CheckConstraint('completed_at IS NULL OR started_at IS NULL OR completed_at >= started_at', name='ck_category_results_completion_after_start'),
        sa.UniqueConstraint('request_id', 'category_id', name='uq_category_results_request_category'),
    )
    op.create_index('ix_category_results_request_category', 'category_results', ['request_id', 'category_id'])
    op.create_index('ix_category_results_status_started', 'category_results', ['status', 'started_at'])

    # Create source references table - pharmaceutical source attribution and tracking
    op.create_table(
        'source_references',
        sa.Column('id', postgresql.UUID(as_uuid=False), primary_key=True),
        sa.Column('category_result_id', postgresql.UUID(as_uuid=False), sa.ForeignKey('category_results.id', ondelete='CASCADE'), nullable=False, index=True),
        sa.Column('api_provider', api_provider_enum, nullable=False, index=True),
        sa.Column('source_url', sa.String(2048)),
        sa.Column('source_title', sa.String(500)),
        sa.Column('source_type', source_type_enum, nullable=False, default='other', index=True),
        sa.Column('content_snippet', sa.Text, nullable=False),
        sa.Column('relevance_score', sa.Float, nullable=False, default=0.0),
        sa.Column('credibility_score', sa.Float, nullable=False, default=0.0),
        sa.Column('published_date', sa.DateTime(timezone=True)),
        sa.Column('authors', sa.Text),
        sa.Column('journal_name', sa.String(255)),
        sa.Column('doi', sa.String(255), index=True),
        sa.Column('extracted_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.func.now()),
        sa.Column('api_response_id', sa.String(255), index=True),
        sa.Column('verification_status', verification_status_enum, nullable=False, default='pending', index=True),
        sa.Column('verified_at', sa.DateTime(timezone=True)),
        sa.Column('verified_by', postgresql.UUID(as_uuid=False), sa.ForeignKey('users.id')),
        sa.CheckConstraint('relevance_score >= 0.0 AND relevance_score <= 1.0', name='ck_source_references_relevance_range'),
        sa.CheckConstraint('credibility_score >= 0.0 AND credibility_score <= 1.0', name='ck_source_references_credibility_range'),
        sa.CheckConstraint("verified_at IS NULL OR verification_status != 'pending'", name='ck_source_references_verified_status'),
    )
    op.create_index('ix_source_references_category_provider', 'source_references', ['category_result_id', 'api_provider'])
    op.create_index('ix_source_references_type_status', 'source_references', ['source_type', 'verification_status'])
    op.create_index('ix_source_references_url_hash', 'source_references', ['source_url'])

    # Create source conflicts table - pharmaceutical data conflict resolution
    op.create_table(
        'source_conflicts',
        sa.Column('id', postgresql.UUID(as_uuid=False), primary_key=True),
        sa.Column('category_result_id', postgresql.UUID(as_uuid=False), sa.ForeignKey('category_results.id', ondelete='CASCADE'), nullable=False, index=True),
        sa.Column('conflict_type', sa.String(100), nullable=False, index=True),
        sa.Column('description', sa.Text, nullable=False),
        sa.Column('conflicting_sources', postgresql.ARRAY(sa.String), nullable=False),
        sa.Column('resolution_strategy', sa.String(100)),
        sa.Column('resolution_notes', sa.Text),
        sa.Column('resolved_at', sa.DateTime(timezone=True)),
        sa.Column('resolved_by', postgresql.UUID(as_uuid=False), sa.ForeignKey('users.id')),
        sa.Column('confidence_impact', sa.Float, nullable=False, default=0.0),
        sa.Column('is_critical', sa.Boolean, nullable=False, default=False),
        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, server_default=sa.func.now()),
        sa.CheckConstraint('resolved_at IS NULL OR resolution_strategy IS NOT NULL', name='ck_source_conflicts_resolution_complete'),
    )
    op.create_index('ix_source_conflicts_category_type', 'source_conflicts', ['category_result_id', 'conflict_type'])
    op.create_index('ix_source_conflicts_critical_unresolved', 'source_conflicts', ['is_critical', 'resolved_at'])

    # Create API usage logs table - external pharmaceutical API call tracking
    op.create_table(
        'api_usage_logs',
        sa.Column('id', postgresql.UUID(as_uuid=False), primary_key=True),
        sa.Column('request_id', postgresql.UUID(as_uuid=False), sa.ForeignKey('drug_requests.id', ondelete='CASCADE'), index=True),
        sa.Column('category_result_id', postgresql.UUID(as_uuid=False), sa.ForeignKey('category_results.id', ondelete='CASCADE'), index=True),
        sa.Column('api_provider', api_provider_enum, nullable=False, index=True),
        sa.Column('endpoint', sa.String(255), nullable=False),
        sa.Column('request_payload', postgresql.JSONB),
        sa.Column('response_status', sa.Integer, nullable=False),
        sa.Column('response_time_ms', sa.Integer, nullable=False),
        sa.Column('token_count', sa.Integer, nullable=False, default=0),
        sa.Column('cost_per_token', sa.Float, nullable=False, default=0.0),
        sa.Column('total_cost', sa.Float, nullable=False, default=0.0),
        sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False, server_default=sa.func.now(), index=True),
        sa.Column('error_message', sa.Text),
        sa.Column('rate_limit_remaining', sa.Integer),
        sa.Column('correlation_id', sa.String(255), index=True),
        sa.CheckConstraint('response_status >= 100 AND response_status < 600', name='ck_api_usage_logs_valid_status'),
        sa.CheckConstraint('response_time_ms >= 0', name='ck_api_usage_logs_time_positive'),
        sa.CheckConstraint('token_count >= 0', name='ck_api_usage_logs_tokens_positive'),
        sa.CheckConstraint('cost_per_token >= 0.0', name='ck_api_usage_logs_cost_per_token_positive'),
        sa.CheckConstraint('total_cost >= 0.0', name='ck_api_usage_logs_total_cost_positive'),
    )
    op.create_index('ix_api_usage_logs_provider_timestamp', 'api_usage_logs', ['api_provider', 'timestamp'])
    op.create_index('ix_api_usage_logs_request_timestamp', 'api_usage_logs', ['request_id', 'timestamp'])
    op.create_index('ix_api_usage_logs_status_timestamp', 'api_usage_logs', ['response_status', 'timestamp'])

    # Create audit events table - immutable pharmaceutical audit trail
    op.create_table(
        'audit_events',
        sa.Column('id', postgresql.UUID(as_uuid=False), primary_key=True),
        sa.Column('request_id', postgresql.UUID(as_uuid=False), sa.ForeignKey('drug_requests.id', ondelete='CASCADE'), index=True),
        sa.Column('event_type', audit_event_type_enum, nullable=False, index=True),
        sa.Column('event_description', sa.String(1000), nullable=False),
        sa.Column('entity_type', sa.String(100), nullable=False, index=True),
        sa.Column('entity_id', sa.String(255), nullable=False, index=True),
        sa.Column('old_values', postgresql.JSONB),
        sa.Column('new_values', postgresql.JSONB),
        sa.Column('user_id', postgresql.UUID(as_uuid=False), sa.ForeignKey('users.id'), index=True),
        sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False, server_default=sa.func.now(), index=True),
        sa.Column('correlation_id', sa.String(255), index=True),
        sa.Column('session_id', sa.String(255), index=True),
        sa.Column('ip_address', sa.String(45)),  # IPv6 support
        sa.Column('user_agent', sa.String(500)),
        sa.Column('audit_metadata', postgresql.JSONB),
    )
    op.create_index('ix_audit_events_entity_timestamp', 'audit_events', ['entity_type', 'entity_id', 'timestamp'])
    op.create_index('ix_audit_events_user_timestamp', 'audit_events', ['user_id', 'timestamp'])
    op.create_index('ix_audit_events_request_timestamp', 'audit_events', ['request_id', 'timestamp'])
    # Note: ix_audit_events_correlation index already created by index=True on column
    # Note: ix_audit_events_timestamp index already created by index=True on column

    # Note: Audit triggers should be created manually or in a separate migration
    # to handle permission and extension requirements properly
    # with open('src/database/audit_triggers.sql', 'r') as f:
    #     audit_triggers_sql = f.read()
    #     op.execute(audit_triggers_sql)

    # Note: Default pharmaceutical categories can be inserted after migration
    # Categories can be added using the application's API or admin interface


def downgrade() -> None:
    """
    Downgrade pharmaceutical database schema.

    Removes pharmaceutical intelligence platform schema while preserving
    audit trails as required for regulatory compliance.

    WARNING: This operation will remove all pharmaceutical intelligence
    data except immutable audit records required for compliance.
    """

    # Drop tables in reverse dependency order
    op.drop_table('audit_events')
    op.drop_table('api_usage_logs')
    op.drop_table('source_conflicts')
    op.drop_table('source_references')
    op.drop_table('category_results')
    op.drop_table('process_tracking')
    op.drop_table('drug_requests')
    op.drop_table('pharmaceutical_categories')
    op.drop_table('users')

    # Drop pharmaceutical enum types
    sa.Enum(name='userrole').drop(op.get_bind(), checkfirst=True)
    sa.Enum(name='auditeventtype').drop(op.get_bind(), checkfirst=True)
    sa.Enum(name='verificationstatus').drop(op.get_bind(), checkfirst=True)
    sa.Enum(name='sourcetype').drop(op.get_bind(), checkfirst=True)
    sa.Enum(name='apiprovider').drop(op.get_bind(), checkfirst=True)
    sa.Enum(name='categorystatus').drop(op.get_bind(), checkfirst=True)
    sa.Enum(name='requeststatus').drop(op.get_bind(), checkfirst=True)

    # Drop pharmaceutical audit functions and triggers
    op.execute("DROP FUNCTION IF EXISTS notify_critical_pharmaceutical_audit() CASCADE")
    op.execute("DROP FUNCTION IF EXISTS validate_pharmaceutical_audit_integrity(VARCHAR, VARCHAR, TIMESTAMP, TIMESTAMP) CASCADE")
    op.execute("DROP FUNCTION IF EXISTS clear_pharmaceutical_audit_context() CASCADE")
    op.execute("DROP FUNCTION IF EXISTS set_pharmaceutical_audit_context(UUID, VARCHAR) CASCADE")
    op.execute("DROP FUNCTION IF EXISTS create_pharmaceutical_audit_event() CASCADE")
    op.execute("DROP VIEW IF EXISTS pharmaceutical_audit_summary CASCADE")